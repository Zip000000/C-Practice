网络的 吞吐量取决于 “瓶颈”
目前 所有瓶颈都是在 “边缘” 产生。


以太网：

OSI七层参考模型：
		
缺点：	设计者缺乏实际经验，
	缺乏商业驱动力
	过于复杂，运行效率很低
	制定的周期太长
	功能重叠，划分不明确
	
网卡 不是物理层设备，是 数据链路层的
中继器：放大信号
集线器：

网卡：MAC地址


协议数据单元： 
	物理层： 比特bit
	数据链路层：帧 frame
	网络层： IP数据报（分组）
	传输层： TCP ： 报文段 segment   UDP ： 用户数据报
	应用层：报文message


分层的好处：
各层之间是独立的
灵活性号
结构上可分割开
易于实现和维护
能促进标准化工作

各层的功能：
	差错控制
	流量控制
	分段和复用
	复用和分用
	链接建立和释放

网络协议的组成要素： 
	语法 ： 数据与控制信息的格式 
	语义：发出何种控制信息做出何种动作，就是对信息的解析 
	同步 ： 流程控制

分组交换：
	存储转发机制。
	
	排队时延 和 分组丢失

电路交换：端到端之间的链接，不常用
	频分复用：
	

应用层：
1.体系结构： 
	CS结构：客户端 服务端

	P2P结构：端对端， 没有明确的客户端和服务端。
		挑战：
socket是应用程序与网络之间的 API


HTTP：
	！是一个无状态协议，服务器不存储关于客户的状态信息。

运输层：
	运输层是端和端之间的概念
	TCP协议 与 UDP 协议
	TCP 报文段 UDP：

	UDP好处：
		

	可靠传输的原理：
		
TCP 和 UDP 可以同时使用同一个端口

TCP：
	1. 发送缓存 与 接受缓存：所谓的程序中的发送和接受 就是从缓存区中存入或读取，真正的发送和接受是由TCP完成的。
	2. TCP是字节流，发送报文时，把报文切成报文段，每个报文段就是一段字节。

	3. ACK：接下来我要几号的包  Seq：我已经收到了几号的包

	4.如果已经到了三个冗余的包，那么就不会等待超时重传，而直接开始重传。
	
	重传机制， 拥塞控制， 流量控制。

	四次挥手：  >
		   <
		客户端发送第二个ACK之后，等待两个往返时间， 确保最后一个ACK被对方收到了。

		客户端：1.发送SYN -> （SYN_SENT）->2.接受SYNACK，发送ACK-> (ESTABLISHED)->
			3.发送FIN -> (FIN_WAIT_1) ->


gbn后退N帧协议







